trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  reportDir: '$(System.DefaultWorkingDirectory)/reports'
  artifactHtmlDir: '$(reportDir)/html'
  summaryFile: '$(Build.ArtifactStagingDirectory)/summary.md'

steps:
  - checkout: self

  - script: |
      echo "üê≥ Build de l'image Docker vuln√©rable"
      docker build -t vuln-app ./app
    displayName: 'Build Docker image'

  - script: |
      echo "üì• Installer Trivy"
      curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
      sudo mv ./bin/trivy /usr/local/bin/
    displayName: 'Install Trivy'

  - script: |
      echo "üì¶ Scan de l'image avec Trivy (SARIF)"
      mkdir -p $(reportDir)
      trivy image --ignore-unfixed --severity HIGH,CRITICAL,MEDIUM --format sarif --output $(reportDir)/trivy-image.sarif vuln-app
    displayName: 'Trivy Scan: Docker Image'

  - script: |
      echo "üìÇ Scan filesystem avec Trivy (SARIF)"
      trivy fs --ignore-unfixed --severity HIGH,CRITICAL,MEDIUM --format sarif --output $(reportDir)/trivy-fs.sarif ./app
    displayName: 'Trivy Scan: Filesystem'

  - script: |
      echo "‚òÅÔ∏è Scan Terraform avec Trivy (SARIF)"
      trivy config --severity HIGH,CRITICAL,MEDIUM --format sarif --output $(reportDir)/trivy-config.sarif ./infra
    displayName: 'Trivy Scan: Terraform (IaC)'

  - script: |
      echo "üõ†Ô∏è G√©n√©ration de rapports HTML simplifi√©s depuis SARIF"
      mkdir -p $(artifactHtmlDir)

      generate_html() {
        local input=$1
        local output=$2
        echo "<html><head><meta charset='UTF-8'><title>Rapport Trivy - $output</title></head><body><h1>Rapport Trivy: $output</h1><p><em>(Affichage des 200 premi√®res vuln√©rabilit√©s)</em></p><ul>" > $(artifactHtmlDir)/$output.html
        jq -r '.runs[].results[:200][] | "<li><strong>" + (.ruleId // "inconnu") + "</strong>: " + (.message.text // "aucun message") + "</li>"' $(reportDir)/$input >> $(artifactHtmlDir)/$output.html
        echo "</ul></body></html>" >> $(artifactHtmlDir)/$output.html
      }

      generate_html trivy-image.sarif trivy-image
      generate_html trivy-fs.sarif trivy-fs
      generate_html trivy-config.sarif trivy-config
    displayName: 'Convert SARIF to simplified HTML'

  - script: |
      echo "üìÇ V√©rification des fichiers HTML g√©n√©r√©s"
      ls -alh $(artifactHtmlDir)
    displayName: 'V√©rifier fichiers HTML'

  - script: |
      echo "## R√©sultats Trivy" > $(summaryFile)
      echo "" >> $(summaryFile)

      echo "### üìÇ Rapport HTML disponible en artefact **Trivy-HTML-Reports**" >> $(summaryFile)
      echo "" >> $(summaryFile)

      echo "### üê≥ Vuln√©rabilit√©s - Docker Image (Top 50)" >> $(summaryFile)
      jq -r '.runs[].results[:50][] | "- **" + (.ruleId // "inconnu") + "** : " + (.message.text // "aucun message")' $(reportDir)/trivy-image.sarif >> $(summaryFile)
      echo "" >> $(summaryFile)

      echo "### üìÅ Vuln√©rabilit√©s - File System (Top 50)" >> $(summaryFile)
      jq -r '.runs[].results[:50][] | "- **" + (.ruleId // "inconnu") + "** : " + (.message.text // "aucun message")' $(reportDir)/trivy-fs.sarif >> $(summaryFile)
      echo "" >> $(summaryFile)

      echo "### ‚òÅÔ∏è Vuln√©rabilit√©s - Terraform Config (Top 50)" >> $(summaryFile)
      jq -r '.runs[].results[:50][] | "- **" + (.ruleId // "inconnu") + "** : " + (.message.text // "aucun message")' $(reportDir)/trivy-config.sarif >> $(summaryFile)
    displayName: 'G√©n√©rer r√©sum√© markdown'

  - task: PublishBuildArtifacts@1
    displayName: 'üì§ Publier rapports HTML Trivy'
    inputs:
      PathtoPublish: '$(artifactHtmlDir)'
      ArtifactName: 'Trivy-HTML-Reports'
      publishLocation: 'Container'

  - script: |
      echo "üìé Affichage du r√©sum√© Markdown dans la page du pipeline"
      echo "##vso[task.addattachment type=Distributedtask.Core.Summary;name=Rapport Trivy;]$(summaryFile)"
    displayName: 'Afficher r√©sum√© dans la page du pipeline'